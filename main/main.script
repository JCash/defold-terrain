local terrain_helper = require("defold-terrain/scripts/helper")
local rendercam = require "rendercam.rendercam"

local function terrain_listener(self, event, data)
	if event == terrain.TERRAIN_PATCH_SHOW then
		local mesh_url = table.remove(self.free_meshes)


		print("url", mesh_url)
		local res = go.get(mesh_url, "vertices")
		resource.set_buffer(res, data.buffer)

		local index = data.z * 65536 + data.x
		table.insert(self.patches[0], index, mesh_url)
	end
	pprint("callback", event, data)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.profiler_enabled = false

	local terrain_data = { view = rendercam.view, proj = rendercam.proj }
	terrain.init(terrain_listener, terrain_data)

	-- patches in use
	self.patches = {}
	self.patches[0] = {} -- lod 0

	self.free_meshes = {}
	table.insert(self.free_meshes, msg.url("terrain#mesh_lod0_0"))
	table.insert(self.free_meshes, msg.url("terrain#mesh_lod0_1"))
	table.insert(self.free_meshes, msg.url("terrain#mesh_lod0_2"))
	table.insert(self.free_meshes, msg.url("terrain#mesh_lod0_3"))
	table.insert(self.free_meshes, msg.url("terrain#mesh_lod0_4"))
	table.insert(self.free_meshes, msg.url("terrain#mesh_lod0_5"))
	table.insert(self.free_meshes, msg.url("terrain#mesh_lod0_6"))
	table.insert(self.free_meshes, msg.url("terrain#mesh_lod0_7"))
	table.insert(self.free_meshes, msg.url("terrain#mesh_lod0_8"))
	

	local b = terrain_helper.create_patch_flat(128,3.95)

	print(b)
	--[[
	local res = nil

	res = go.get("terrain#mesh_lod0_0", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_1", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_2", "vertices")
	resource.set_buffer(res, b)

	res = go.get("terrain#mesh_lod0_3", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_4", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_5", "vertices")
	resource.set_buffer(res, b)

	res = go.get("terrain#mesh_lod0_6", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_7", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_8", "vertices")
	resource.set_buffer(res, b)
	--]]
end

function final(self)
	terrain.exit()
end

function update(self, dt)
	local terrain_data = { view = rendercam.view, proj = rendercam.proj }
	terrain.update(dt, terrain_data)
end

function on_input(self, action_id, action)
	if action_id == hash("TOGGLE_PROFILER") and action.pressed then
		self.profiler_enabled = not self.profiler_enabled
		profiler.enable_ui(self.profiler_enabled)
	end
end