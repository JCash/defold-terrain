local terrain_helper = require("defold-terrain/scripts/helper")
local rendercam = require("rendercam.rendercam")


local function terrain_listener(self, event, data)
	if event == terrain.TERRAIN_PATCH_SHOW then
		if self.one then
			return
		end

		--self.one = true

		local mesh_id = table.remove(self.free_meshes)
		local mesh_url = msg.url(nil, mesh_id, "mesh")
		--mesh_url = msg.url("terrain#mesh_lod0_0")

		--pprint("callback", mesh_url, event, data)
		print("SHOW", mesh_id, data.id, mesh_url, data.position)

		-- any time spent here is for uploading the vertex buffer
		go.set_position(data.position, mesh_id)
		local res = go.get(mesh_url, "vertices")
		resource.set_buffer(res, data.buffer)

		data.mesh_id = mesh_id
		self.patches[0][data.id] = data
		-- for k, _ in pairs(self.patches[0]) do
		-- 	print("MAWE", "key", k)
		-- end
		--pprint("PATCHES", self.patches[0])
	elseif event == terrain.TERRAIN_PATCH_HIDE then
		print("MAWE", "hide patch", data.id, "pos", data.x, data.z)
		--pprint("PATCHES", data.id, self.patches[0])
		-- for k, _ in pairs(self.patches[0]) do
		-- 	print("MAWE", "key", k)
		-- end
		local patch_data = self.patches[0][data.id]
		--print("Readding mesh_id", patch_data.mesh_id)
		table.insert(self.free_meshes, patch_data.mesh_id)
		self.patches[0][data.id] = nil
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.profiler_enabled = false

	self.one = false

	if terrain then
		local terrain_data = { view = rendercam.view, proj = rendercam.proj }
		terrain.init(terrain_listener, terrain_data)
	end

	-- patches in use
	self.patches = {}
	self.patches[0] = {} -- lod 0

	local patches = collectionfactory.create("terrain#collectionfactory")
	--pprint("PATCHES", patches)

	self.free_meshes = {}

	for _, v in pairs(patches) do
		table.insert(self.free_meshes, v)
	end
end

local function reload_terrain(self)
	for k, v in pairs(self.patches[0]) do
		print("reload", k, v)
		terrain.reload_patch(v.ptr)
	end
end

function final(self)
	if terrain then
		terrain.exit()
	end
end

function update(self, dt)
	if terrain then
		local terrain_data = { view = rendercam.view, proj = rendercam.proj }

		local inv = vmath.inv(terrain_data.view)
		local pos = vmath.vector3(inv.m03, inv.m13, inv.m23)
		local dir = vmath.vector3(-inv.m02, -inv.m12, -inv.m22)
		msg.post("main#gui", "set_position", {position = pos, direction = dir})
		
		terrain.update(dt, terrain_data)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("TOGGLE_PROFILER") and action.pressed then
		self.profiler_enabled = not self.profiler_enabled
		profiler.enable_ui(self.profiler_enabled)
	elseif action_id == hash("TOGGLE_WIREFRAME") and action.pressed then
		self.profiler_enabled = not self.profiler_enabled
		msg.post("@render:", "gfx_dbg_toggle", {'wireframe'})
	elseif action_id == hash("TERRAIN_RECALC") and action.pressed then
		reload_terrain(self)
	end
end
