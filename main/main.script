local terrain_helper = require("defold-terrain/scripts/helper")
local rendercam = require("rendercam.rendercam")

local function terrain_listener(self, event, data)
	if event == terrain.TERRAIN_PATCH_SHOW then
		if self.one then
			return
		end

		--self.one = true

		local id = table.remove(self.free_meshes)
		local mesh_url = msg.url(nil, id, "mesh")
		--mesh_url = msg.url("terrain#mesh_lod0_0")

		pprint("callback", mesh_url, event, data)

		-- any time spent here is for uploading the vertex buffer
		go.set_position(data.position, msg.url(nil, id, nil))
		local res = go.get(mesh_url, "vertices")
		resource.set_buffer(res, data.buffer)

		local index = data.z * 65536 + data.x
		table.insert(self.patches[0], index, mesh_url)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.profiler_enabled = false

	self.one = false

	if terrain then
		local terrain_data = { view = rendercam.view, proj = rendercam.proj }
		terrain.init(terrain_listener, terrain_data)
	end

	-- patches in use
	self.patches = {}
	self.patches[0] = {} -- lod 0

	local patches = collectionfactory.create("terrain#collectionfactory")
	pprint("PATCHES", patches)
	
	self.free_meshes = {}

	for _, v in pairs(patches) do
		table.insert(self.free_meshes, v)
	end


	--local b = terrain_helper.create_patch_flat(128,3.95)

	--print(b)
	--[[
	local res = nil

	res = go.get("terrain#mesh_lod0_0", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_1", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_2", "vertices")
	resource.set_buffer(res, b)

	res = go.get("terrain#mesh_lod0_3", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_4", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_5", "vertices")
	resource.set_buffer(res, b)

	res = go.get("terrain#mesh_lod0_6", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_7", "vertices")
	resource.set_buffer(res, b)
	res = go.get("terrain#mesh_lod0_8", "vertices")
	resource.set_buffer(res, b)
	--]]
end

function final(self)
	if terrain then
		terrain.exit()
	end
end

function update(self, dt)
	if terrain then
		local terrain_data = { view = rendercam.view, proj = rendercam.proj }
		terrain.update(dt, terrain_data)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("TOGGLE_PROFILER") and action.pressed then
		self.profiler_enabled = not self.profiler_enabled
		profiler.enable_ui(self.profiler_enabled)
	elseif action_id == hash("TOGGLE_WIREFRAME") and action.pressed then
		self.profiler_enabled = not self.profiler_enabled
		msg.post("@render:", "gfx_dbg_toggle", {'wireframe'})
	end
end